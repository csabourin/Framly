 [vite] connecting...
 [vite] connected.
 Download the React DevTools for a better development experience: https://reactjs.org/link/react-devtools
  Selector selectHistoryStats returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
selectHistoryStats @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 IndexedDB upgrade triggered, version: 3 from: 2
 Existing stores: Array(6)
 Creating images store
 IndexedDB schema created/upgraded. Final stores: Array(7)
 Loaded 23 history entries from IndexedDB
 History manager initialized
 IndexedDB opened successfully
 IndexedDB initialized successfully
 Project loaded from IndexedDB: default-project
 Loading persisted project: Untitled Project
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element rectangle-1755688161061-vvrbxgmfp border styles: Array(2)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element rectangle-1755688162649-u4yal8bfg border styles: Array(2)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element image-1755688208168-p2ztgy69x border styles: Array(1)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element rectangle-1755688165956-somsff1eh border styles: Array(2)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element button-1755857660739-76xla9qwj border styles: Array(1)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element rectangle-6ac84195-6732-42ed-b4c9-8e0af2544986 border styles: Array(2)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element rectangle-2945b174-af1a-48bd-aa3d-fc904c86745c border styles: Array(2)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element image-3094775b-6da1-42ca-8a7a-a002b73ef54d border styles: Array(1)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element rectangle-c23d82af-9244-4405-ba6c-c58d462c1b69 border styles: Array(2)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element button-1755857569478-544ps5hri border styles: Array(2)
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Components loaded from IndexedDB: 1
 Categories loaded from IndexedDB: 0
 Loaded 1 components in 0 categories
 Loaded 1 custom classes and 0 class categories
 Element rectangle-1755688161061-vvrbxgmfp border styles: Array(2)
 Element rectangle-1755688162649-u4yal8bfg border styles: Array(2)
 Element image-1755688208168-p2ztgy69x border styles: Array(1)
 Element rectangle-1755688165956-somsff1eh border styles: Array(2)
 Element button-1755857660739-76xla9qwj border styles: Array(1)
 Element rectangle-6ac84195-6732-42ed-b4c9-8e0af2544986 border styles: Array(2)
 Element rectangle-2945b174-af1a-48bd-aa3d-fc904c86745c border styles: Array(2)
 Element image-3094775b-6da1-42ca-8a7a-a002b73ef54d border styles: Array(1)
 Element rectangle-c23d82af-9244-4405-ba6c-c58d462c1b69 border styles: Array(2)
 Element button-1755857569478-544ps5hri border styles: Array(2)
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 No persisted UI settings found, using defaults
 Auto-save started (interval: 5s)
 Persistence manager initialized
 History recorded: Update element
 Saved 24 history entries to IndexedDB
 Project saved to IndexedDB: default-project
 Project auto-saved
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 History recorded: Update element
 Saved 25 history entries to IndexedDB
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 History recorded: Delete element
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Saved 26 history entries to IndexedDB
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Project saved to IndexedDB: default-project
 Project auto-saved
 History recorded: Delete element
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Saved 27 history entries to IndexedDB
 Project saved to IndexedDB: default-project
 Project auto-saved
  Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.
(anonymous) @ @radix-ui_react-dialog.js?v=3a7ea275:337
 üü° handlePropertyChange called: Object
 History recorded: Add CSS class
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Saved 28 history entries to IndexedDB
 üöÄ STARTING WEBSITE IMPORT PROCESS
 üìç Target URL: https://ombudsman.ncc-ccn.ca/
 ‚è±Ô∏è Start time: 2025-08-22T16:51:28.783Z
 üåê STEP 1: Fetching webpage content from server...
 Project saved to IndexedDB: default-project
 Project auto-saved
 ‚úÖ STEP 1 COMPLETE: Website content fetched successfully
 üìÑ HTML length: 8392 characters
 üé® CSS length: 214533 characters
 üñºÔ∏è Assets count: 0
 üîß STEP 2: Parsing HTML content...
 ‚úÖ STEP 2 COMPLETE: HTML parsed successfully
 üîç STEP 3: Analyzing HTML for used CSS classes...
 üîç Scanning HTML for used CSS classes...
 üìä Found 63 elements with class attributes
 üìã Element 1: NAV classes: [container, navbar, navbar-expand-lg, navbar-light, align-items-end, navbar-nudge]
 üìã Element 2: A classes: [navbar-brand, mr-auto]
 üìã Element 3: BUTTON classes: [navbar-toggler, ml-auto, border-primary]
 üìã Element 4: SPAN classes: [navbar-toggler-icon]
 üìã Element 5: DIV classes: [collapse, navbar-collapse, hamburger-stack, nav-tabs]
 üìã Element 6: DIV classes: [navbar-nav, ml-auto]
 üìã Element 7: DIV classes: [nav-item]
 üìã Element 8: A classes: [text-primary, font-weight-bold, nav-link, nav-link-header]
 üìã Element 9: DIV classes: [nav-item]
 üìã Element 10: A classes: [text-primary, font-weight-bold, nav-link, nav-link-header]
 ‚úÖ Class extraction complete: 82 unique classes found
 üìä Found 82 unique CSS classes in HTML: Array(82)
 üé® STEP 4: Processing CSS with selective extraction...
 üé® Processing CSS styles with selective import and scoping
 üìä Input - CSS length: 214533 characters
 üìä Input - Classes to match: 82
 Creating CSS scope: imported-qJaaWLh5
 üîç Parsing CSS rules...
 üìä CSS PARSING RESULTS:
   Total rules found: 2701
   Rules imported: 202
   Rules skipped: 2499
     - Unused classes: 2414
     - @rules/@media: 83
     - Invalid/comments: 2
   Compression ratio: 92.5% reduction
 ‚úì Added scoped class "imported-qJaaWLh5-html"
 ‚úì Added scoped class "imported-qJaaWLh5-article--aside--figcaption--figure--footer--header--hgroup--main--nav--section"
 ‚úì Added scoped class "imported-qJaaWLh5-body"
 ‚úì Added scoped class "imported-qJaaWLh5-hr"
 ‚úì Added scoped class "imported-qJaaWLh5-h1--h2--h3--h4--h5--h6"
 ‚úì Added scoped class "imported-qJaaWLh5-p"
 ‚úì Added scoped class "imported-qJaaWLh5-abbr-data-original-title---abbr-title-"
 ‚úì Added scoped class "imported-qJaaWLh5-address"
 ‚úì Added scoped class "imported-qJaaWLh5-dl--ol--ul"
 ‚úì Added scoped class "imported-qJaaWLh5-ol-ol--ol-ul--ul-ol--ul-ul"
 ‚úÖ Injected 23138 characters of scoped CSS
 üìÑ CSS Preview: .imported-qJaaWLh5 html {
  font-family: sans-serif;
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: transparent;
}

.imported-qJaaWLh5 article, .imported-qJaaWLh5 aside, .imported-qJaaWLh5 figcaption, .imported-qJaaWLh5 figure, .imported-qJaaWLh5 footer, .impor...
 ‚úÖ STEP 4 COMPLETE: CSS processing finished successfully
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 üèóÔ∏è STEP 5: Converting HTML to canvas elements...
 üéØ Processing 9 top-level elements from body
 üîß Processing element 1/9: NAV
 üìã Classes: [container, navbar, navbar-expand-lg...]
 Element NAV text content: "About
				
							
					Role of the Ombudsman
				"
 History recorded: Add container
 Created element: container (NAV) - "container" with scoped classes: [imported-qJaaWLh5, imported-qJaaWLh5-container, imported-qJaaWLh5-navbar, imported-qJaaWLh5-navbar-expand-lg, imported-qJaaWLh5-navbar-light, imported-qJaaWLh5-align-items-end, imported-qJaaWLh5-navbar-nudge]
 Processing 4 children of NAV
 Element A text content: ""
 History recorded: Add text
 Created element: text (A) - "A text" with scoped classes: [imported-qJaaWLh5-navbar-brand, imported-qJaaWLh5-mr-auto]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Element BUTTON text content: ""
 History recorded: Add button
 Created element: button (BUTTON) - "Button" with scoped classes: [imported-qJaaWLh5-navbar-toggler, imported-qJaaWLh5-ml-auto, imported-qJaaWLh5-border-primary]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element kfWy8Uj6YCn5qdrU4qQ-o border styles: Array(3)
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Element DIV text content: "About
				
							
					Role of the Ombudsman
				"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-collapse, imported-qJaaWLh5-navbar-collapse, imported-qJaaWLh5-hamburger-stack, imported-qJaaWLh5-nav-tabs]
 Processing 1 children of DIV
 Element DIV text content: "About
				
							
					Role of the Ombudsman
				"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-navbar-nav, imported-qJaaWLh5-ml-auto]
 Processing 6 children of DIV
 Element DIV text content: "About"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-nav-item]
 Processing 1 children of DIV
 Element A text content: "About"
 History recorded: Add text
 Created element: text (A) - "About" with scoped classes: [imported-qJaaWLh5-text-primary, imported-qJaaWLh5-font-weight-bold, imported-qJaaWLh5-nav-link, imported-qJaaWLh5-nav-link-header]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element PyjdwwS-qRC8-WLLboI3K border styles: Array(1)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Element DIV text content: "Role of the Ombudsman"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-nav-item]
 Processing 1 children of DIV
 Element A text content: "Role of the Ombudsman"
 History recorded: Add text
 Created element: text (A) - "Role of the Ombudsman" with scoped classes: [imported-qJaaWLh5-text-primary, imported-qJaaWLh5-font-weight-bold, imported-qJaaWLh5-nav-link, imported-qJaaWLh5-nav-link-header]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Element DIV text content: "Making a Complaint"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-nav-item]
 Processing 1 children of DIV
 Element A text content: "Making a Complaint"
 History recorded: Add text
 Created element: text (A) - "Making a Complaint" with scoped classes: [imported-qJaaWLh5-text-primary, imported-qJaaWLh5-font-weight-bold, imported-qJaaWLh5-nav-link, imported-qJaaWLh5-nav-link-header]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Element DIV text content: "Message and Biography"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-nav-item]
 Processing 1 children of DIV
 Element A text content: "Message and Biography"
 History recorded: Add text
 Created element: text (A) - "Message and Biography" with scoped classes: [imported-qJaaWLh5-text-primary, imported-qJaaWLh5-font-weight-bold, imported-qJaaWLh5-nav-link, imported-qJaaWLh5-nav-link-header]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Element DIV text content: "FAQ"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-nav-item]
 Processing 1 children of DIV
 Element A text content: "FAQ"
 History recorded: Add text
 Created element: text (A) - "FAQ" with scoped classes: [imported-qJaaWLh5-text-primary, imported-qJaaWLh5-font-weight-bold, imported-qJaaWLh5-nav-link, imported-qJaaWLh5-nav-link-header]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Element DIV text content: "Contact Us"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-nav-item]
 Processing 1 children of DIV
 Element A text content: "Contact Us"
 History recorded: Add text
 Created element: text (A) - "Contact Us" with scoped classes: [imported-qJaaWLh5-text-primary, imported-qJaaWLh5-font-weight-bold, imported-qJaaWLh5-nav-link, imported-qJaaWLh5-nav-link-header]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Successfully processed 6 children of DIV
 Successfully processed 1 children of DIV
 Element DIV text content: "Fran√ßais"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-nav-language-switch]
 Processing 1 children of DIV
 Element A text content: "Fran√ßais"
 History recorded: Add text
 Created element: text (A) - "Fran√ßais" with scoped classes: [imported-qJaaWLh5-font-weight-bold, imported-qJaaWLh5-nav-language-override]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Successfully processed 4 children of NAV
 ‚úÖ Processed: NAV (1 total)
 üîß Processing element 2/9: NAV
 üìã Classes: [container, p-0]
 Element NAV text content: "Home"
 History recorded: Add container
 Created element: container (NAV) - "container" with scoped classes: [imported-qJaaWLh5, imported-qJaaWLh5-container]
 Processing 1 children of NAV
 Element OL text content: "Home"
 History recorded: Add container
 Created element: container (OL) - "container" with scoped classes: [imported-qJaaWLh5-breadcrumb, imported-qJaaWLh5-rounded-0, imported-qJaaWLh5-light-bg]
 Processing 1 children of OL
 Element LI text content: "Home"
 History recorded: Add container
 Created element: container (LI) - "container" with scoped classes: [imported-qJaaWLh5-breadcrumb-item]
 Processing 1 children of LI
 Element A text content: "Home"
 History recorded: Add text
 Created element: text (A) - "Home" with scoped classes: [imported-qJaaWLh5-text-white]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 Element rNch4w555-iWO5ff7t5r4 border styles: Array(1)
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of LI
 Successfully processed 1 children of OL
 Successfully processed 1 children of NAV
 ‚úÖ Processed: NAV (2 total)
 üîß Processing element 3/9: HEADER
 üìã Classes: [container]
 Element HEADER text content: "I will listen and ensure that your complaint or co"
 History recorded: Add container
 Created element: container (HEADER) - "container" with scoped classes: [imported-qJaaWLh5, imported-qJaaWLh5-container]
 Processing 1 children of HEADER
 Element DIV text content: "I will listen and ensure that your complaint or co"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-row, imported-qJaaWLh5-primary-header]
 Processing 2 children of DIV
 Element DIV text content: ""
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-col-4, imported-qJaaWLh5-col-sm-2]
 Processing 1 children of DIV
 Element IMG text content: ""
 History recorded: Add image
 Created element: image (IMG) - "container" with scoped classes: [imported-qJaaWLh5-header-card-image, imported-qJaaWLh5-mw-100, imported-qJaaWLh5-mh-100]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Element DIV text content: "I will listen and ensure that your complaint or co"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-col-8, imported-qJaaWLh5-col-sm-10, imported-qJaaWLh5-header-padding]
 Processing 3 children of DIV
 Element IMG text content: ""
 History recorded: Add image
 Created element: image (IMG) - "container" with scoped classes: [imported-qJaaWLh5-header-left-quote]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Element P text content: "I will listen and ensure that your complaint or co"
 History recorded: Add text
 Created element: text (P) - "I will listen and ensure that your complaint or co" with scoped classes: [imported-qJaaWLh5-header-text]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Element A text content: "Message and Biography"
 History recorded: Add text
 Created element: text (A) - "Message and Biography" with scoped classes: []
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 3 children of DIV
 Successfully processed 2 children of DIV
 Successfully processed 1 children of HEADER
 ‚úÖ Processed: HEADER (3 total)
 üîß Processing element 4/9: MAIN
 üìã Classes: [container, clearfix]
 Element MAIN text content: "The mandate of the NCC Ombudsman is to provide mem"
 History recorded: Add container
 Created element: container (MAIN) - "container" with scoped classes: [imported-qJaaWLh5, imported-qJaaWLh5-container, imported-qJaaWLh5-clearfix]
 Processing 1 children of MAIN
 Element DIV text content: "The mandate of the NCC Ombudsman is to provide mem"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-row]
 Processing 3 children of DIV
 Element DIV text content: "The mandate of the NCC Ombudsman is to provide mem"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-col-12, imported-qJaaWLh5-col-lg-5]
 Processing 3 children of DIV
 Element P text content: "The mandate of the NCC Ombudsman is to provide mem"
 History recorded: Add text
 Created element: text (P) - "The mandate of the NCC Ombudsman is to provide mem" with scoped classes: []
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Element P text content: "The mission of the NCC Ombudsman is to listen care"
 History recorded: Add text
 Created element: text (P) - "The mission of the NCC Ombudsman is to listen care" with scoped classes: []
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Element P text content: "Learn more about the office of the Ombudsman >>"
 History recorded: Add text
 Created element: text (P) - "Learn more about the office of the Ombudsman >>" with scoped classes: []
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 3 children of DIV
 Element DIV text content: "Would you like to make a complaint?
		
		There are"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-col-12, imported-qJaaWLh5-col-lg-3]
WebsiteImport.tsx:615 Processing 1 children of DIV
WebsiteImport.tsx:438 Element SECTION text content: "Would you like to make a complaint?
		
		There are"
historyManager.ts:122 History recorded: Add container
WebsiteImport.tsx:611 Created element: container (SECTION) - "container" with scoped classes: [imported-qJaaWLh5-highlight]
WebsiteImport.tsx:615 Processing 4 children of SECTION
WebsiteImport.tsx:438 Element H2 text content: "Would you like to make a complaint?"
historyManager.ts:122 History recorded: Add text
WebsiteImport.tsx:611 Created element: text (H2) - "Would you like to make a complaint?" with scoped classes: []
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:438 Element HR text content: ""
historyManager.ts:122 History recorded: Add container
WebsiteImport.tsx:611 Created element: container (HR) - "container" with scoped classes: []
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:438 Element P text content: "There are 3 simple steps to take to ensure a smoot"
historyManager.ts:122 History recorded: Add text
WebsiteImport.tsx:611 Created element: text (P) - "There are 3 simple steps to take to ensure a smoot" with scoped classes: []
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:438 Element A text content: "Complaint Process"
historyManager.ts:122 History recorded: Add text
WebsiteImport.tsx:611 Created element: text (A) - "Complaint Process" with scoped classes: [imported-qJaaWLh5-btn, imported-qJaaWLh5-btn-main]
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CanvasElement.tsx:519 Element t3cdy0EHkmkrSIGgSmV97 border styles: Array(2)
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:639 Successfully processed 4 children of SECTION
WebsiteImport.tsx:639 Successfully processed 1 children of DIV
WebsiteImport.tsx:438 Element DIV text content: "Frequently Asked Questions
				
					
				
					1
"
historyManager.ts:122 History recorded: Add container
WebsiteImport.tsx:611 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-col-12, imported-qJaaWLh5-col-lg-4]
WebsiteImport.tsx:615 Processing 1 children of DIV
WebsiteImport.tsx:438 Element SECTION text content: "Frequently Asked Questions
				
					
				
					1
"
historyManager.ts:122 History recorded: Add container
WebsiteImport.tsx:611 Created element: container (SECTION) - "container" with scoped classes: [imported-qJaaWLh5-faq, imported-qJaaWLh5-bg-primary, imported-qJaaWLh5-text-white]
WebsiteImport.tsx:615 Processing 4 children of SECTION
WebsiteImport.tsx:438 Element H2 text content: "Frequently Asked Questions"
historyManager.ts:122 History recorded: Add text
WebsiteImport.tsx:611 Created element: text (H2) - "Frequently Asked Questions" with scoped classes: [imported-qJaaWLh5-faq-title]
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:438 Element HR text content: ""
historyManager.ts:122 History recorded: Add container
WebsiteImport.tsx:611 Created element: container (HR) - "container" with scoped classes: [imported-qJaaWLh5-light]
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:438 Element DIV text content: "1
				
				
					Q: How long will it take the NCC "
historyManager.ts:122 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-row, imported-qJaaWLh5-faq-group, imported-qJaaWLh5-faq-margin]
 Processing 2 children of DIV
 Element DIV text content: "1"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-col-2, imported-qJaaWLh5-col-sm-1, imported-qJaaWLh5-col-lg-2, imported-qJaaWLh5-text-center, imported-qJaaWLh5-faq-number]
 Processing 1 children of DIV
 Element DIV text content: "1"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-faq-circle, imported-qJaaWLh5-d-inline-block]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Element DIV text content: "Q: How long will it take the NCC Ombudsman to inve"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-col-10, imported-qJaaWLh5-col-sm-11, imported-qJaaWLh5-col-lg-10, imported-qJaaWLh5-faq-pair]
 Processing 2 children of DIV
 Element DIV text content: "Q: How long will it take the NCC Ombudsman to inve"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-faq-question]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Element DIV text content: "A: While the Ombudsman strives to respond to compl"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-faq-answer, imported-qJaaWLh5-faq-margin]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 2 children of DIV
 Successfully processed 2 children of DIV
 Element DIV text content: "More questions and answers"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-row, imported-qJaaWLh5-faq-group, imported-qJaaWLh5-faq-margin]
 Processing 2 children of DIV
 Element DIV text content: ""
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-col-2, imported-qJaaWLh5-col-sm-1, imported-qJaaWLh5-col-lg-2]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Element DIV text content: "More questions and answers"
 History recorded: Add container
 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-col-10, imported-qJaaWLh5-col-sm-11, imported-qJaaWLh5-col-lg-10]
 Processing 1 children of DIV
 Element A text content: "More questions and answers"
 History recorded: Add text
 Created element: text (A) - "More questions and answers" with scoped classes: [imported-qJaaWLh5-faq-link]
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ react-redux.js?v=3a7ea275:1043
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 CompoundPropertyInput render: Object
 Successfully processed 1 children of DIV
 Successfully processed 2 children of DIV
 Successfully processed 4 children of SECTION
 Successfully processed 1 children of DIV
 Successfully processed 3 children of DIV
 Successfully processed 1 children of MAIN
 ‚úÖ Processed: MAIN (4 total)
 üîß Processing element 5/9: FOOTER
 üìã Classes: [container, p-0, pt-3]
 Element FOOTER text content: "Reports and Media
							Resources
							Terms of"
 History recorded: Add container
 Created element: container (FOOTER) - "container" with scoped classes: [imported-qJaaWLh5, imported-qJaaWLh5-container, imported-qJaaWLh5-pt-3]
 Processing 1 children of FOOTER
 Element NAV text content: "Reports and Media
							Resources
							Terms of"
 History recorded: Add container
 Created element: container (NAV) - "container" with scoped classes: [imported-qJaaWLh5-navbar, imported-qJaaWLh5-navbar-dark, imported-qJaaWLh5-bg-primary, imported-qJaaWLh5-navbar-expand]
 Processing 2 children of NAV
 Element DIV text content: "Reports and Media
							Resources
							Terms of"
historyManager.ts:122 History recorded: Add container
WebsiteImport.tsx:611 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-collapse, imported-qJaaWLh5-navbar-collapse, imported-qJaaWLh5-navbar-nav, imported-qJaaWLh5-flex-column, imported-qJaaWLh5-align-items-start]
WebsiteImport.tsx:615 Processing 3 children of DIV
WebsiteImport.tsx:438 Element A text content: "Reports and Media"
historyManager.ts:122 History recorded: Add text
WebsiteImport.tsx:611 Created element: text (A) - "Reports and Media" with scoped classes: [imported-qJaaWLh5-nav-item, imported-qJaaWLh5-nav-link, imported-qJaaWLh5-nav-link-footer]
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:438 Element A text content: "Resources"
historyManager.ts:122 History recorded: Add text
WebsiteImport.tsx:611 Created element: text (A) - "Resources" with scoped classes: [imported-qJaaWLh5-nav-item, imported-qJaaWLh5-nav-link, imported-qJaaWLh5-nav-link-footer]
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:438 Element A text content: "Terms of Reference"
utils.ts:16  SerializableStateInvariantMiddleware took 35ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
warnIfExceeded @ utils.ts:16
historyManager.ts:122 History recorded: Add text
WebsiteImport.tsx:611 Created element: text (A) - "Terms of Reference" with scoped classes: [imported-qJaaWLh5-nav-item, imported-qJaaWLh5-nav-link, imported-qJaaWLh5-nav-link-footer]
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:639 Successfully processed 3 children of DIV
WebsiteImport.tsx:438 Element DIV text content: ""
utils.ts:16  SerializableStateInvariantMiddleware took 33ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
warnIfExceeded @ utils.ts:16
historyManager.ts:122 History recorded: Add container
WebsiteImport.tsx:611 Created element: container (DIV) - "container" with scoped classes: [imported-qJaaWLh5-navbar-nav, imported-qJaaWLh5-mx-auto, imported-qJaaWLh5-align-items-right]
WebsiteImport.tsx:615 Processing 1 children of DIV
WebsiteImport.tsx:438 Element A text content: ""
historyManager.ts:122 History recorded: Add text
WebsiteImport.tsx:611 Created element: text (A) - "A text" with scoped classes: [imported-qJaaWLh5-navbar-brand]
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
useSelector.ts:199  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization Object
(anonymous) @ useSelector.ts:199
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:639 Successfully processed 1 children of DIV
WebsiteImport.tsx:639 Successfully processed 2 children of NAV
WebsiteImport.tsx:639 Successfully processed 1 children of FOOTER
WebsiteImport.tsx:120 ‚úÖ Processed: FOOTER (5 total)
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
CompoundPropertyInput.tsx:246 CompoundPropertyInput render: Object
WebsiteImport.tsx:107 üîß Processing element 6/9: SCRIPT
WebsiteImport.tsx:111 ‚è≠Ô∏è Skipping non-visual element: SCRIPT
WebsiteImport.tsx:107 üîß Processing element 7/9: SCRIPT
WebsiteImport.tsx:111 ‚è≠Ô∏è Skipping non-visual element: SCRIPT
WebsiteImport.tsx:107 üîß Processing element 8/9: SCRIPT
WebsiteImport.tsx:111 ‚è≠Ô∏è Skipping non-visual element: SCRIPT
WebsiteImport.tsx:107 üîß Processing element 9/9: SCRIPT
WebsiteImport.tsx:111 ‚è≠Ô∏è Skipping non-visual element: SCRIPT
WebsiteImport.tsx:134 ‚úÖ STEP 5 COMPLETE: Processed 5/9 elements in 2232ms
WebsiteImport.tsx:156 Processing assets...
WebsiteImport.tsx:407 Processing assets: 0
WebsiteImport.tsx:169 üéâ IMPORT COMPLETE: Website successfully imported!
WebsiteImport.tsx:176 üîÑ Import process finished
historyManager.ts:69 Saved 50 history entries to IndexedDB
indexedDB.ts:591 Project saved to IndexedDB: default-project
persistence.ts:178 Project auto-saved
