here’s a polished set of CSS tokens + state classes for a selection tool that feels crisp on hover and rock-solid on click, with accessibility baked in. You can drop this into any page-builder where blocks are rectangles.

State model (class/attribute cheatsheet)

Apply these to each selectable block (e.g., .block):

data-state="idle|hover|focus|selected|multiselected|editing|dragging"

data-locked="true|false"

data-invalid="true|false" (e.g., forbidden target)

aria-selected="true|false" (for a11y and CSS hooks)

Keyboard modality helper on <body>: data-input-modality="mouse|keyboard" (set via tiny JS to style focus differently)

You can combine classes if you prefer: .is-hovered, .is-selected, etc. Attributes are shown because they’re tidy for tooling.

CSS tokens (themeable, light/dark safe)
:root {
  /* Core */
  --sel-radius: 10px;
  --sel-pad: 8px;
  --sel-outline: 2px;
  --sel-gap: 6px;                 /* gap between content edge and overlay */

  /* Colors (OKLCH keeps vibrancy in dark/light) */
  --c-accent: oklch(60% 0.20 265);
  --c-accent-soft: color-mix(in oklab, var(--c-accent), transparent 82%);
  --c-hover: oklch(75% 0.08 265);
  --c-focus: oklch(80% 0.15 265);
  --c-invalid: oklch(60% 0.20 25);
  --c-locked: oklch(55% 0.05 265);
  --c-bg-mask: color-mix(in oklab, var(--c-accent), transparent 90%);
  --c-handle: oklch(40% 0.05 265);

  /* Effects */
  --e-ring: 0 0 0 2px var(--c-focus), 0 0 0 6px color-mix(in oklab, var(--c-focus), transparent 75%);
  --e-selected: 0 0 0 1px color-mix(in oklab, var(--c-accent), transparent 10%) inset,
                0 1px 8px rgba(0,0,0,.12);
  --e-hover: 0 0 0 1px color-mix(in oklab, var(--c-hover), transparent 10%) inset;

  /* Motion */
  --t-fast: 120ms;
  --t-med: 160ms;
  --ease: cubic-bezier(.2,.7,0,1);
}
@media (prefers-reduced-motion: reduce) {
  :root { --t-fast: 0ms; --t-med: 0ms; --ease: linear; }
}

/* High contrast mode support */
@media (forced-colors: active) {
  :root {
    --c-accent: CanvasText;
    --c-accent-soft: transparent;
    --c-hover: Highlight;
    --c-focus: Highlight;
    --c-invalid: GrayText;
    --c-locked: GrayText;
  }
}

Base block & overlay

Use an overlay pseudo-element so outlines don’t shift layout (no borders). All visuals live on ::after.

.block {
  position: relative;
  border-radius: var(--sel-radius);
  /* your normal block styles here */
  transition: box-shadow var(--t-fast) var(--ease), transform var(--t-fast) var(--ease);
}

/* Selection overlay (no pointer capture) */
.block::after {
  content: "";
  position: absolute;
  inset: var(--sel-gap);
  border-radius: calc(var(--sel-radius) - 2px);
  pointer-events: none;
  opacity: 0;
  transform: scale(.995);
  box-shadow: none;
  transition: opacity var(--t-fast) var(--ease), transform var(--t-fast) var(--ease), box-shadow var(--t-fast) var(--ease);
}

States
Hover (mouse-only “polite” affordance)
/* Show hover only when using a mouse, not keyboard tabbing */
body[data-input-modality="mouse"] .block[data-state="hover"]::after {
  opacity: 1;
  box-shadow: var(--e-hover);
  outline: 1px solid var(--c-hover);        /* fallback for forced-colors */
  transform: scale(1);
}

Focus (keyboard)
.block[data-state="focus"] { outline: none; }
.block[data-state="focus"]::after {
  opacity: 1;
  box-shadow: var(--e-ring);
  transform: scale(1);
}

Selected (single)
.block[data-state="selected"]::after,
.block[aria-selected="true"]::after {
  opacity: 1;
  box-shadow: 0 0 0 var(--sel-outline) var(--c-accent), var(--e-selected);
  background: var(--c-accent-soft);
  transform: scale(1);
}

Multi-selected (stacked emphasis)
.block[data-state="multiselected"]::after {
  opacity: 1;
  box-shadow:
    0 0 0 var(--sel-outline) var(--c-accent),
    0 0 0 calc(var(--sel-outline) + 2px) color-mix(in oklab, var(--c-accent), transparent 70%),
    var(--e-selected);
  background: color-mix(in oklab, var(--c-accent), transparent 88%);
}

Editing mode (content editing or resizing)
.block[data-state="editing"]::after {
  opacity: 1;
  box-shadow: 0 0 0 2px var(--c-focus), 0 0 0 6px color-mix(in oklab, var(--c-focus), transparent 70%);
  background: var(--c-bg-mask);
}

Dragging (selected origin)
.block[data-state="dragging"] {
  transform: translateZ(0) scale(.995);
  box-shadow: 0 10px 24px rgba(0,0,0,.18);
  cursor: grabbing;
}
body .block[data-state="dragging"]::after { opacity: 0; } /* the ghost will carry the visuals */

Invalid / Forbidden
.block[data-invalid="true"]::after {
  opacity: 1;
  box-shadow: 0 0 0 2px var(--c-invalid), 0 0 0 6px color-mix(in oklab, var(--c-invalid), transparent 70%);
  background: color-mix(in oklab, var(--c-invalid), transparent 88%);
}
.block[data-invalid="true"] { cursor: not-allowed; }

Locked
.block[data-locked="true"]::after {
  opacity: 1;
  background:
    repeating-linear-gradient(45deg,
      color-mix(in oklab, var(--c-locked), transparent 85%) 0 8px,
      color-mix(in oklab, var(--c-locked), transparent 70%) 8px 16px);
  box-shadow: 0 0 0 1px var(--c-locked) inset;
}
.block[data-locked="true"] { cursor: default; }

Handles & selection affordances

A dedicated handle reduces accidental drags and gives you a solid anchor for selection.

.block .handle {
  position: absolute;
  top: var(--sel-gap);
  left: var(--sel-gap);
  width: 28px; height: 28px;
  display: grid; place-items: center;
  border-radius: 8px;
  cursor: grab;
  color: var(--c-handle);
  background: color-mix(in oklab, var(--c-handle), transparent 92%);
  transition: background var(--t-fast) var(--ease), transform var(--t-fast) var(--ease);
}
.block .handle:active { cursor: grabbing; transform: scale(.97); }
.block[data-state="selected"] .handle { background: color-mix(in oklab, var(--c-accent), transparent 85%); color: var(--c-accent); }


If you also show resize handles in editing mode:

.block[data-state="editing"] .resizer {
  position: absolute; width: 10px; height: 10px;
  background: var(--c-accent); border-radius: 50%;
  box-shadow: 0 0 0 2px #fff;
}
.block[data-state="editing"] .resizer.br { right: -5px; bottom: -5px; cursor: nwse-resize; }
.block[data-state="editing"] .resizer.bl { left: -5px; bottom: -5px; cursor: nesw-resize; }
.block[data-state="editing"] .resizer.tr { right: -5px; top: -5px; cursor: nesw-resize; }
.block[data-state="editing"] .resizer.tl { left: -5px; top: -5px; cursor: nwse-resize; }

Drop target helper (when dragging over)

This pairs nicely with your A/I/B indicator; it clarifies the container you’ll drop into.

.block[data-drop-target="inside"]::after {
  opacity: 1;
  background: color-mix(in oklab, var(--c-accent), transparent 88%);
  box-shadow: 0 0 0 2px var(--c-accent);
}

Keyboard-first focus styling

Make keyboard discovery obvious and keep mouse focus quieter:

/* Only render heavy focus visuals for keyboard modality */
body[data-input-modality="keyboard"] .block:focus-visible::after {
  opacity: 1; box-shadow: var(--e-ring); transform: scale(1);
}
body[data-input-modality="mouse"] .block:focus-visible::after {
  box-shadow: 0 0 0 1px var(--c-hover);
}
