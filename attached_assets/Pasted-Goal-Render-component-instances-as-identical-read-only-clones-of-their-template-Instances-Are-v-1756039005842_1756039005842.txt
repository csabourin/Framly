Goal

Render component instances as identical, read‑only clones of their template. Instances:

Are visible on the canvas.

Are not interactive/editable (no per‑child selection or hover handlers).

Can be moved/transformed as a single unit.

Show only one property in the Properties Panel: “Detach instance”.

Open the Component Editor (isolated edit tab) on double‑click of the instance (not its children).

Template changes propagate to all instances automatically.

Detaching an instance converts it into a fully editable element tree at the same DOM position. Only then do children become interactive, selectable, and receive unique element IDs (except when a child itself is another component instance, which remains an instance).

Behavioral Requirements
1) Rendering

Instance rendering mode

Expand the template into a flattened render output used only for paint/layout.

Do not register expanded children with the global selection/interaction layers.

Children inside an instance render with the template’s computed styles, layout, borders, etc.

IDs

Inner nodes of an instance must not get unique element IDs used by the canvas engine.

Keep a single instance ID for the root instance node (e.g., component-instance-<nanoid>).

Unique IDs for children are assigned only after detaching.

2) Selection & Interaction

Single selectable target: Only the instance root is selectable.

Disabled child interaction: No hover outlines, no drag handles, no resize handles, no context menu, no keyboard selection for children while in instance mode.

Double‑click behavior: Double‑click anywhere on the instance → open Component Editor for the template (not for child elements).

3) Properties Panel

When an instance is selected:

Show only:

Header: “Component Instance: {ComponentName}”

Button/Action: Detach instance

Hide all style/typography/layout properties.

When a detached tree (former instance) is selected:

Show the full property set for the selected element as usual.

4) Element Tree (Sidebar)

Instances:

Display the full expanded hierarchy for code‑export visibility.

Grey out the children (disabled state) to indicate they are not editable.

Only the instance root is focusable/selectable in the tree.

Detached trees:

Children are normal (not greyed), fully selectable and editable in the tree.

5) Editing Workflow

Instance double‑click → Component Editor tab opens on the template definition.

Edits made in the template:

Persist to storage (IndexedDB) with version tracking.

Propagate to all instances (existing and future), preserving instance‑level transforms/position.

Ensure no React hooks order issues; instance render path must be hook‑stable.

6) Detach Workflow

Action: “Detach instance” on a selected instance:

Replace the instance root with a real element tree cloned from the template at the same DOM position / parent.

Assign fresh unique IDs to all new elements (children) so they become interactive/selectable.

Do not detach nested component instances inside the tree; those remain instances unless explicitly detached later.

Update history (undo/redo) as a single atomic step.

After detach:

The new tree behaves like any regular elements: movable, editable, deletable, with full Properties Panel.

7) Movement & Transforms

Instances can be moved, aligned, snapped, and transformed as a single unit.

Child transforms remain locked to the instance root.

Constraints/guides/snapping use the instance’s bounding box only.

8) Propagation Rules

When the template updates, all instances re‑render with the updated structure and styles.

Instance‑specific state to preserve:

Position/transform of the instance root.

Per‑instance metadata (e.g., name, lock flags).

No per‑child overrides exist in instance mode (that’s what detach is for).

9) Undo/Redo & Persistence

All operations (move instance, detach instance, edit template) must create sane, minimal history entries and persist to IndexedDB with the existing autosave/undo system.

Cross‑session: instances remain instances after reload; detached trees remain detached.

History integrity: detaching and then undoing/redoing must restore the exact previous/next state (IDs, selection, and positions).

10) Integration Points

Works with:

Canvas selection/hover systems (children suppressed in instance mode).

Element tree (children greyed, root selectable).

Properties Panel (single action in instance mode).

Exporters:

Code export should use the expanded hierarchy of the instance (same structure as the template) even if the UI children are non‑interactive.

Hit‑testing should treat the instance as a single object.

Remove/disable any remaining “Legacy ComponentInstanceElement redirect” logic that forces interactive expansion.

Acceptance Criteria (Checklist)

Rendering & Interaction

 Instance children render correctly with full styles and layout.

 Only the instance root is selectable; children inside an instance cannot be hovered/selected/edited.

 No unique canvas IDs are assigned to instance children until detach.

Properties Panel

 Selecting an instance shows only “Detach instance” (and component name).

 No other styling/spacing/typography controls appear for instances.

Element Tree

 Full hierarchy is visible for instances but greyed out at child levels.

 Clicking children in the tree does not select them; only the instance root can be selected.

Editing

 Double‑clicking an instance opens the Component Editor for the template.

 Saving changes in the template updates all instances while keeping their positions.

Detach

 “Detach instance” replaces the instance with a real editable tree at the same DOM location.

 Detached children get new unique IDs and become fully interactive/selectable.

 Nested component instances remain instances (not auto‑detached).

State, History, Persistence

 Move/resize/align operations work on the instance root as a single unit.

 All actions (move, detach, template edit) create proper undo/redo entries and persist across reloads in IndexedDB.

 Reload preserves instance vs. detached states exactly.

Export

 Code export uses the expanded hierarchy of instances (matching the template structure), regardless of non‑interactive UI state.

Regression Guards

 No React hooks order violations in render paths.

 No accidental registration of instance children into global interaction layers.

 Legacy expansion that made children interactive is fully disabled for instances.

Test Scenarios

Read‑only instance

Create component A (rectangle + text).

Add two instances to the canvas.

Attempt to select the text inside an instance → should not be selectable.

Move an instance → moves as one unit.

Properties Panel → shows only “Detach instance”.

Edit template propagates

Double‑click an instance → Component Editor opens.

Change text style, save.

Both instances update; positions unchanged.

Detach converts to editable tree

Select an instance → Detach.

Children become selectable/interactive with unique IDs.

Nested component instance inside remains an instance (still non‑interactive) unless detached separately.

Element Tree UI

Instance shows full hierarchy, children greyed.

After detach, hierarchy becomes normal (not greyed), children selectable.

Undo/Redo

Detach, then Undo → back to instance.

Redo → detached tree restored with same IDs and selection.

Export

Export while an instance exists → exported code contains full element hierarchy for that instance.

Non‑Goals / Explicitly Not Wanted

No per‑child overrides or selections inside an instance.

No unique IDs on instance children before detach.

No automatic detachment of nested component instances.

Please implement the above behavior and align with the existing React 18 + TypeScript + Redux Toolkit + IndexedDB architecture and the current Component Editor model.