Console.js:61  Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ dialog.tsx:542
commitHookEffectListMount @ react-dom.development.js:23189
commitPassiveMountOnFiber @ react-dom.development.js:24965
commitPassiveMountEffects_complete @ react-dom.development.js:24930
commitPassiveMountEffects_begin @ react-dom.development.js:24917
commitPassiveMountEffects @ react-dom.development.js:24905
flushPassiveEffectsImpl @ react-dom.development.js:27078
flushPassiveEffects @ react-dom.development.js:27023
commitRootImpl @ react-dom.development.js:26974
commitRoot @ react-dom.development.js:26721
performSyncWorkOnRoot @ react-dom.development.js:26156
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
6402-2535928c6770715e.js:1  WebSocket is already in CLOSING or CLOSED state.
send @ 6402-2535928c6770715e.js:1
k @ 6402-2535928c6770715e.js:1
send @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
apply @ 6402-2535928c6770715e.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
c @ 2830-2663341f49da286f.js:1
(anonymous) @ 2830-2663341f49da286f.js:1
n @ _app-dc45261c6c86c5c5.js:16
setTimeout
(anonymous) @ _app-dc45261c6c86c5c5.js:16
(anonymous) @ 2830-2663341f49da286f.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
n @ 7071-2b18ee71483ee1b7.js:1
n @ _app-dc45261c6c86c5c5.js:16
react-dom.development.js:4161 [Violation] 'click' handler took 1242ms
[Violation] 'click' handler took 1243ms
Console.js:61 All data cleared
Console.js:61 All data cleared successfully
6402-2535928c6770715e.js:1  WebSocket is already in CLOSING or CLOSED state.
send @ 6402-2535928c6770715e.js:1
k @ 6402-2535928c6770715e.js:1
send @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
apply @ 6402-2535928c6770715e.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
c @ 2830-2663341f49da286f.js:1
(anonymous) @ 2830-2663341f49da286f.js:1
n @ _app-dc45261c6c86c5c5.js:16
setTimeout
(anonymous) @ _app-dc45261c6c86c5c5.js:16
(anonymous) @ 2830-2663341f49da286f.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
n @ 7071-2b18ee71483ee1b7.js:1
n @ _app-dc45261c6c86c5c5.js:16
Console.js:61 Project saved to IndexedDB: default-project
Console.js:61 Project auto-saved
6402-2535928c6770715e.js:1  WebSocket is already in CLOSING or CLOSED state.
send @ 6402-2535928c6770715e.js:1
k @ 6402-2535928c6770715e.js:1
send @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
apply @ 6402-2535928c6770715e.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
c @ 2830-2663341f49da286f.js:1
(anonymous) @ 2830-2663341f49da286f.js:1
n @ _app-dc45261c6c86c5c5.js:16
setTimeout
(anonymous) @ _app-dc45261c6c86c5c5.js:16
(anonymous) @ 2830-2663341f49da286f.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
n @ 7071-2b18ee71483ee1b7.js:1
n @ _app-dc45261c6c86c5c5.js:16
Console.js:61  Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}.
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ dialog.tsx:542
commitHookEffectListMount @ react-dom.development.js:23189
commitPassiveMountOnFiber @ react-dom.development.js:24965
commitPassiveMountEffects_complete @ react-dom.development.js:24930
commitPassiveMountEffects_begin @ react-dom.development.js:24917
commitPassiveMountEffects @ react-dom.development.js:24905
flushPassiveEffectsImpl @ react-dom.development.js:27078
flushPassiveEffects @ react-dom.development.js:27023
commitRootImpl @ react-dom.development.js:26974
commitRoot @ react-dom.development.js:26721
performSyncWorkOnRoot @ react-dom.development.js:26156
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
6402-2535928c6770715e.js:1  WebSocket is already in CLOSING or CLOSED state.
send @ 6402-2535928c6770715e.js:1
k @ 6402-2535928c6770715e.js:1
send @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
apply @ 6402-2535928c6770715e.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
c @ 2830-2663341f49da286f.js:1
(anonymous) @ 2830-2663341f49da286f.js:1
n @ _app-dc45261c6c86c5c5.js:16
setTimeout
(anonymous) @ _app-dc45261c6c86c5c5.js:16
(anonymous) @ 2830-2663341f49da286f.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
n @ 7071-2b18ee71483ee1b7.js:1
n @ _app-dc45261c6c86c5c5.js:16
Console.js:61 🚀 STARTING WEBSITE IMPORT PROCESS
Console.js:61 📍 Target URL: https://ombudsman.ncc-ccn.ca/
Console.js:61 ⏱️ Start time: 2025-08-22T15:59:44.330Z
Console.js:61 🌐 STEP 1: Fetching webpage content from server...
6402-2535928c6770715e.js:1  WebSocket is already in CLOSING or CLOSED state.
send @ 6402-2535928c6770715e.js:1
k @ 6402-2535928c6770715e.js:1
send @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
apply @ 6402-2535928c6770715e.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
c @ 2830-2663341f49da286f.js:1
(anonymous) @ 2830-2663341f49da286f.js:1
n @ _app-dc45261c6c86c5c5.js:16
setTimeout
(anonymous) @ _app-dc45261c6c86c5c5.js:16
(anonymous) @ 2830-2663341f49da286f.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
n @ 7071-2b18ee71483ee1b7.js:1
n @ _app-dc45261c6c86c5c5.js:16
Console.js:61 ✅ STEP 1 COMPLETE: Website content fetched successfully
Console.js:61 📄 HTML length: 8392 characters
Console.js:61 🎨 CSS length: 214533 characters
Console.js:61 🖼️ Assets count: 0
Console.js:61 🔧 STEP 2: Parsing HTML content...
 ✅ STEP 2 COMPLETE: HTML parsed successfully
 🔍 STEP 3: Analyzing HTML for used CSS classes...
 🔍 Scanning HTML for used CSS classes...
 📊 Found 63 elements with class attributes
 📋 Element 1: NAV classes: [container, navbar, navbar-expand-lg, navbar-light, align-items-end, navbar-nudge]
 📋 Element 2: A classes: [navbar-brand, mr-auto]
 📋 Element 3: BUTTON classes: [navbar-toggler, ml-auto, border-primary]
 📋 Element 4: SPAN classes: [navbar-toggler-icon]
 📋 Element 5: DIV classes: [collapse, navbar-collapse, hamburger-stack, nav-tabs]
 📋 Element 6: DIV classes: [navbar-nav, ml-auto]
 📋 Element 7: DIV classes: [nav-item]
 📋 Element 8: A classes: [text-primary, font-weight-bold, nav-link, nav-link-header]
 📋 Element 9: DIV classes: [nav-item]
 📋 Element 10: A classes: [text-primary, font-weight-bold, nav-link, nav-link-header]
 ✅ Class extraction complete: 82 unique classes found
 📊 Found 82 unique CSS classes in HTML: (82) ['container', 'navbar', 'navbar-expand-lg', 'navbar-light', 'align-items-end', 'navbar-nudge', 'navbar-brand', 'mr-auto', 'navbar-toggler', 'ml-auto', 'border-primary', 'navbar-toggler-icon', 'collapse', 'navbar-collapse', 'hamburger-stack', 'nav-tabs', 'navbar-nav', 'nav-item', 'text-primary', 'font-weight-bold', 'nav-link', 'nav-link-header', 'nav-language-switch', 'nav-language-override', 'p-0', 'breadcrumb', 'mb-0', 'rounded-0', 'light-bg', 'breadcrumb-item', 'text-white', 'row', 'primary-header', 'col-4', 'col-sm-2', 'header-card-image', 'mw-100', 'mh-100', 'col-8', 'col-sm-10', 'header-padding', 'header-left-quote', 'header-text', 'header-right-quote', 'btn', 'btn-primary', 'header-button', 'clearfix', 'col-12', 'col-lg-5', 'col-lg-3', 'highlight', 'btn-main', 'col-lg-4', 'faq', 'bg-primary', 'faq-title', 'light', 'faq-group', 'faq-margin', 'col-2', 'col-sm-1', 'col-lg-2', 'text-center', 'faq-number', 'faq-circle', 'd-inline-block', 'col-10', 'col-sm-11', 'col-lg-10', 'faq-pair', 'faq-question', 'faq-answer', 'faq-link', 'pt-3', 'navbar-dark', 'navbar-expand', 'flex-column', 'align-items-start', 'nav-link-footer', 'mx-auto', 'align-items-right']
 🎨 STEP 4: Processing CSS with selective extraction...
 🎨 Processing CSS styles with selective import and scoping
 📊 Input - CSS length: 214533 characters
 📊 Input - Classes to match: 82
 Creating CSS scope: imported-5ffUO6Mj
 🔍 Parsing CSS rules...
 📊 CSS PARSING RESULTS:
   Total rules found: 2701
   Rules imported: 202
   Rules skipped: 2499
     - Unused classes: 2414
     - @rules/@media: 83
     - Invalid/comments: 2
   Compression ratio: 92.5% reduction
 ✓ Added scoped class "imported-5ffUO6Mj-html"
 ✓ Added scoped class "imported-5ffUO6Mj-article--aside--figcaption--figure--footer--header--hgroup--main--nav--section"
 ✓ Added scoped class "imported-5ffUO6Mj-body"
 ✓ Added scoped class "imported-5ffUO6Mj-hr"
 ✓ Added scoped class "imported-5ffUO6Mj-h1--h2--h3--h4--h5--h6"
 ✓ Added scoped class "imported-5ffUO6Mj-p"
 ✓ Added scoped class "imported-5ffUO6Mj-abbr-data-original-title---abbr-title-"
 ✓ Added scoped class "imported-5ffUO6Mj-address"
 ✓ Added scoped class "imported-5ffUO6Mj-dl--ol--ul"
 ✓ Added scoped class "imported-5ffUO6Mj-ol-ol--ol-ul--ul-ol--ul-ul"
 ✓ Added scoped class "imported-5ffUO6Mj-dt"
 ✓ Added scoped class "imported-5ffUO6Mj-dd"
 ✓ Added scoped class "imported-5ffUO6Mj-blockquote"
 ✓ Added scoped class "imported-5ffUO6Mj-b--strong"
 ✓ Added scoped class "imported-5ffUO6Mj-small"
 ✓ Added scoped class "imported-5ffUO6Mj-sub--sup"
 ✓ Added scoped class "imported-5ffUO6Mj-sub"
 ✓ Added scoped class "imported-5ffUO6Mj-sup"
 ✓ Added scoped class "imported-5ffUO6Mj-a"
 ✓ Added scoped class "imported-5ffUO6Mj-a-hover"
 ✓ Added scoped class "imported-5ffUO6Mj-a-not--href---not--tabindex--"
 ✓ Added scoped class "imported-5ffUO6Mj-a-not--href---not--tabindex---focus--a-not--href---not--tabindex---hover"
 ✓ Added scoped class "imported-5ffUO6Mj-a-not--href---not--tabindex---focus"
 ✓ Added scoped class "imported-5ffUO6Mj-code--kbd--pre--samp"
 ✓ Added scoped class "imported-5ffUO6Mj-pre"
 ✓ Added scoped class "imported-5ffUO6Mj-figure"
 ✓ Added scoped class "imported-5ffUO6Mj-img"
 ✓ Added scoped class "imported-5ffUO6Mj-svg"
 ✓ Added scoped class "imported-5ffUO6Mj-table"
 ✓ Added scoped class "imported-5ffUO6Mj-caption"
 ✓ Added scoped class "imported-5ffUO6Mj-th"
 ✓ Added scoped class "imported-5ffUO6Mj-label"
 ✓ Added scoped class "imported-5ffUO6Mj-button"
 ✓ Added scoped class "imported-5ffUO6Mj-button-focus"
 ✓ Added scoped class "imported-5ffUO6Mj-button--input--optgroup--select--textarea"
 ✓ Added scoped class "imported-5ffUO6Mj-button--input"
 ✓ Added scoped class "imported-5ffUO6Mj-button--select"
 ✓ Added scoped class "imported-5ffUO6Mj-select"
 ✓ Added scoped class "imported-5ffUO6Mj-input-type-checkbox---input-type-radio-"
 ✓ Added scoped class "imported-5ffUO6Mj-input-type-date---input-type-datetime-local---input-type-month---input-type-time-"
 ✓ Added scoped class "imported-5ffUO6Mj-textarea"
 ✓ Added scoped class "imported-5ffUO6Mj-fieldset"
 ✓ Added scoped class "imported-5ffUO6Mj-legend"
 ✓ Added scoped class "imported-5ffUO6Mj-progress"
 ✓ Added scoped class "imported-5ffUO6Mj-output"
 ✓ Added scoped class "imported-5ffUO6Mj-summary"
 ✓ Added scoped class "imported-5ffUO6Mj-template"
 ✓ Added scoped class "imported-5ffUO6Mj-hr"
 ✓ Added scoped class "imported-5ffUO6Mj-code"
 ✓ Added scoped class "imported-5ffUO6Mj-a-code"
 ✓ Added scoped class "imported-5ffUO6Mj-kbd"
 ✓ Added scoped class "imported-5ffUO6Mj-kbd-kbd"
 ✓ Added scoped class "imported-5ffUO6Mj-pre"
 ✓ Added scoped class "imported-5ffUO6Mj-pre-code"
 ✓ Added scoped class "imported-5ffUO6Mj-container"
 ✓ Added scoped class "imported-5ffUO6Mj-row"
 ✓ Added scoped class "imported-5ffUO6Mj-col-2"
 ✓ Added scoped class "imported-5ffUO6Mj-col-4"
 ✓ Added scoped class "imported-5ffUO6Mj-col-8"
 ✓ Added scoped class "imported-5ffUO6Mj-col-10"
 ✓ Added scoped class "imported-5ffUO6Mj-col-12"
 ✓ Added scoped class "imported-5ffUO6Mj-col-sm-1"
 ✓ Added scoped class "imported-5ffUO6Mj-col-sm-2"
 ✓ Added scoped class "imported-5ffUO6Mj-col-sm-10"
 ✓ Added scoped class "imported-5ffUO6Mj-col-sm-11"
 ✓ Added scoped class "imported-5ffUO6Mj-col-lg-2"
 ✓ Added scoped class "imported-5ffUO6Mj-col-lg-3"
 ✓ Added scoped class "imported-5ffUO6Mj-col-lg-4"
 ✓ Added scoped class "imported-5ffUO6Mj-col-lg-5"
 ✓ Added scoped class "imported-5ffUO6Mj-col-lg-10"
 ✓ Added scoped class "imported-5ffUO6Mj-select-form-control-focus---ms-value"
 ✓ Added scoped class "imported-5ffUO6Mj-select-form-control-multiple---select-form-control-size-"
 ✓ Added scoped class "imported-5ffUO6Mj-textarea-form-control"
 ✓ Added scoped class "imported-5ffUO6Mj-btn"
 ✓ Added scoped class "imported-5ffUO6Mj-btn:hover"
 ✓ Added scoped class "imported-5ffUO6Mj-a-btn-disabled--fieldset-disabled-a-btn"
 ✓ Added scoped class "imported-5ffUO6Mj-btn-primary"
 ✓ Added scoped class "imported-5ffUO6Mj-btn-primary:hover"
 ✓ Added scoped class "imported-5ffUO6Mj-btn-primary:not(:disabled):not(.disabled).active,
.btn-primary:not(:disabled):not(.disabled):active,
.show>.btn-primary.dropdown-toggle"
 ✓ Added scoped class "imported-5ffUO6Mj-btn-primary:not(:disabled):not(.disabled).active:focus,
.btn-primary:not(:disabled):not(.disabled):active:focus,
.show>.btn-primary.dropdown-toggle:focus"
 ✓ Added scoped class "imported-5ffUO6Mj-input-type-button--btn-block--input-type-reset--btn-block--input-type-submit--btn-block"
 ✓ Added scoped class "imported-5ffUO6Mj-collapse:not(.show)"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-nav-link"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-nav-link:focus,
.nav-link:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-nav-tabs"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-nav-tabs .nav-item"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-nav-tabs .nav-link"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-nav-tabs .nav-link:focus,
.nav-tabs .nav-link:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-nav-tabs .nav-link.disabled"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-nav-tabs .nav-item.show .nav-link,
.nav-tabs .nav-link.active"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-nav-tabs .dropdown-menu"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-brand"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-brand:focus,
.navbar-brand:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-nav"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-nav .nav-link"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-nav .dropdown-menu"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-collapse"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-toggler"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-toggler:focus,
.navbar-toggler:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-toggler-icon"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand-lg .navbar-nav"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand-lg .navbar-nav .dropdown-menu"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand-lg .navbar-nav .nav-link"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand-lg .navbar-collapse"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand-lg .navbar-toggler"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand .navbar-nav"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand .navbar-nav .dropdown-menu"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand .navbar-nav .nav-link"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand .navbar-collapse"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-expand .navbar-toggler"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-brand"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-brand:focus,
.navbar-light .navbar-brand:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-nav .nav-link"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-nav .nav-link:focus,
.navbar-light .navbar-nav .nav-link:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-nav .nav-link.disabled"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-nav .active>.nav-link,
.navbar-light .navbar-nav .nav-link.active,
.navbar-light .navbar-nav .nav-link.show,
.navbar-light .navbar-nav .show>.nav-link"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-toggler"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-toggler-icon"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-text"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-text a"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-light .navbar-text a:focus,
.navbar-light .navbar-text a:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-brand"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-brand:focus,
.navbar-dark .navbar-brand:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-nav .nav-link"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-nav .nav-link:focus,
.navbar-dark .navbar-nav .nav-link:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-nav .nav-link.disabled"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-nav .active>.nav-link,
.navbar-dark .navbar-nav .nav-link.active,
.navbar-dark .navbar-nav .nav-link.show,
.navbar-dark .navbar-nav .show>.nav-link"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-toggler"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-toggler-icon"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-text"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-text a"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar-dark .navbar-text a:focus,
.navbar-dark .navbar-text a:hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-breadcrumb"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-focus--a-badge-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-btn .badge"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-primary-focus--a-badge-primary-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-primary-focus--a-badge-primary-focus"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-secondary-focus--a-badge-secondary-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-secondary-focus--a-badge-secondary-focus"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-success-focus--a-badge-success-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-success-focus--a-badge-success-focus"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-info-focus--a-badge-info-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-info-focus--a-badge-info-focus"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-warning-focus--a-badge-warning-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-warning-focus--a-badge-warning-focus"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-danger-focus--a-badge-danger-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-danger-focus--a-badge-danger-focus"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-light-focus--a-badge-light-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-light-focus--a-badge-light-focus"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-dark-focus--a-badge-dark-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-badge-dark-focus--a-badge-dark-focus"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-to"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-button-close"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-close-disabled"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-bg-primary"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-bg-primary-focus--a-bg-primary-hover--button-bg-primary-focus--button-bg-primary-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-bg-secondary-focus--a-bg-secondary-hover--button-bg-secondary-focus--button-bg-secondary-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-bg-success-focus--a-bg-success-hover--button-bg-success-focus--button-bg-success-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-bg-info-focus--a-bg-info-hover--button-bg-info-focus--button-bg-info-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-bg-warning-focus--a-bg-warning-hover--button-bg-warning-focus--button-bg-warning-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-bg-danger-focus--a-bg-danger-hover--button-bg-danger-focus--button-bg-danger-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-bg-light-focus--a-bg-light-hover--button-bg-light-focus--button-bg-light-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-bg-dark-focus--a-bg-dark-hover--button-bg-dark-focus--button-bg-dark-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-border-primary"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-rounded-0"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-clearfix::after"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-d-inline-block"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-flex-column"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-align-items-start"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-align-items-end"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-mw-100"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-mh-100"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-mb-0,
.my-0"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-p-0"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-pt-3,
.py-3"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-mr-auto,
.mx-auto"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-ml-auto,
.mx-auto"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-text-center"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-font-weight-bold"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-text-white"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-text-primary"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-text-primary-focus--a-text-primary-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-text-secondary-focus--a-text-secondary-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-text-success-focus--a-text-success-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-text-info-focus--a-text-info-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-text-warning-focus--a-text-warning-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-text-danger-focus--a-text-danger-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-text-light-focus--a-text-light-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-text-dark-focus--a-text-dark-hover"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-a-not--btn-"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-abbr-title---after"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-pre"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-blockquote------pre"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-thead"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-img------tr"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-h2------h3------p"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-h2------h3"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-body"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-container"
Console.js:61 ✓ Added scoped class "imported-5ffUO6Mj-navbar"
Console.js:61 ✓ Injected 23138 characters of scoped CSS
Console.js:61 Scoped CSS preview: .imported-5ffUO6Mj html {
  font-family: sans-serif;
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: transparent;
}

.imported-5ffUO6Mj article, .imported-5ffUO6Mj aside, .imported-5ffUO6Mj figcaption, .imported-5ffUO6Mj figure, .imported-5ffUO6Mj footer, .imported-5ffUO6Mj header, .imported-5ffUO6Mj hgroup, .imported-5ffUO6Mj main, .imported-5ffUO6Mj nav, .imported-5ffUO6Mj section {
  display: block;
}

.imported-5ffUO6Mj body {
  margin: 0;
  font-family:...
Console.js:61 🏗️ STEP 5: Converting HTML to canvas elements...
Console.js:61 🎯 Processing 9 top-level elements from body
Console.js:61 Processing element 1/9: NAV
Console.js:61 Element classes: (6) ['container', 'navbar', 'navbar-expand-lg', 'navbar-light', 'align-items-end', 'navbar-nudge']
Console.js:61 Element content preview: 
	
				
		
			
			
	
	
		
	
	
	
		
										
					About
				
							
					Role of the Ombudsman
			
Console.js:61 Element NAV text content: "About
				
							
					Role of the Ombudsman
				"
Console.js:61  SerializableStateInvariantMiddleware took 63ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (NAV) - "container" with scoped classes: [imported-5ffUO6Mj, imported-5ffUO6Mj-container, imported-5ffUO6Mj-navbar, imported-5ffUO6Mj-navbar-expand-lg, imported-5ffUO6Mj-navbar-light, imported-5ffUO6Mj-align-items-end, imported-5ffUO6Mj-navbar-nudge]
Console.js:61 Processing 4 children of NAV
Console.js:61 Element A text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 62ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "A text" with scoped classes: [imported-5ffUO6Mj-navbar-brand, imported-5ffUO6Mj-mr-auto]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element BUTTON text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 62ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add button
Console.js:61 Created element: button (BUTTON) - "Button" with scoped classes: [imported-5ffUO6Mj-navbar-toggler, imported-5ffUO6Mj-ml-auto, imported-5ffUO6Mj-border-primary]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 Element 5qIh2Mp5kG61KD8w6YO2l border styles: (3) [Array(2), Array(2), Array(2)]
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element DIV text content: "About
				
							
					Role of the Ombudsman
				"
Console.js:61  SerializableStateInvariantMiddleware took 87ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-collapse, imported-5ffUO6Mj-navbar-collapse, imported-5ffUO6Mj-hamburger-stack, imported-5ffUO6Mj-nav-tabs]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element DIV text content: "About
				
							
					Role of the Ombudsman
				"
Console.js:61  SerializableStateInvariantMiddleware took 80ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-navbar-nav, imported-5ffUO6Mj-ml-auto]
Console.js:61 Processing 6 children of DIV
Console.js:61 Element DIV text content: "About"
Console.js:61  SerializableStateInvariantMiddleware took 67ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-nav-item]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element A text content: "About"
Console.js:61  SerializableStateInvariantMiddleware took 57ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "About" with scoped classes: [imported-5ffUO6Mj-text-primary, imported-5ffUO6Mj-font-weight-bold, imported-5ffUO6Mj-nav-link, imported-5ffUO6Mj-nav-link-header]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 Element Jz_-PbPUzE4i_Ta1Q7IAg border styles: [Array(2)]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Element DIV text content: "Role of the Ombudsman"
Console.js:61  SerializableStateInvariantMiddleware took 80ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-nav-item]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element A text content: "Role of the Ombudsman"
Console.js:61  SerializableStateInvariantMiddleware took 87ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Role of the Ombudsman" with scoped classes: [imported-5ffUO6Mj-text-primary, imported-5ffUO6Mj-font-weight-bold, imported-5ffUO6Mj-nav-link, imported-5ffUO6Mj-nav-link-header]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Element DIV text content: "Making a Complaint"
Console.js:61  SerializableStateInvariantMiddleware took 63ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-nav-item]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element A text content: "Making a Complaint"
Console.js:61  SerializableStateInvariantMiddleware took 67ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Making a Complaint" with scoped classes: [imported-5ffUO6Mj-text-primary, imported-5ffUO6Mj-font-weight-bold, imported-5ffUO6Mj-nav-link, imported-5ffUO6Mj-nav-link-header]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Element DIV text content: "Message and Biography"
Console.js:61  SerializableStateInvariantMiddleware took 75ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-nav-item]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element A text content: "Message and Biography"
Console.js:61  SerializableStateInvariantMiddleware took 76ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Message and Biography" with scoped classes: [imported-5ffUO6Mj-text-primary, imported-5ffUO6Mj-font-weight-bold, imported-5ffUO6Mj-nav-link, imported-5ffUO6Mj-nav-link-header]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Element DIV text content: "FAQ"
Console.js:61  SerializableStateInvariantMiddleware took 226ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-nav-item]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element A text content: "FAQ"
Console.js:61  SerializableStateInvariantMiddleware took 200ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "FAQ" with scoped classes: [imported-5ffUO6Mj-text-primary, imported-5ffUO6Mj-font-weight-bold, imported-5ffUO6Mj-nav-link, imported-5ffUO6Mj-nav-link-header]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
[Violation] 'setInterval' handler took <N>ms
[Violation] 'setInterval' handler took <N>ms
[Violation] 'setInterval' handler took <N>ms
[Violation] 'setInterval' handler took <N>ms
[Violation] 'setInterval' handler took <N>ms
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Element DIV text content: "Contact Us"
Console.js:61  SerializableStateInvariantMiddleware took 308ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-nav-item]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element A text content: "Contact Us"
Console.js:61  SerializableStateInvariantMiddleware took 139ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Contact Us" with scoped classes: [imported-5ffUO6Mj-text-primary, imported-5ffUO6Mj-font-weight-bold, imported-5ffUO6Mj-nav-link, imported-5ffUO6Mj-nav-link-header]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Successfully processed 6 children of DIV
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Element DIV text content: "Français"
Console.js:61  SerializableStateInvariantMiddleware took 213ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-nav-language-switch]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element A text content: "Français"
Console.js:61  SerializableStateInvariantMiddleware took 137ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Français" with scoped classes: [imported-5ffUO6Mj-font-weight-bold, imported-5ffUO6Mj-nav-language-override]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Successfully processed 4 children of NAV
Console.js:61 Successfully processed: NAV
Console.js:61 Processing element 2/9: NAV
Console.js:61 Element classes: (2) ['container', 'p-0']
Console.js:61 Element content preview: 
  
  	Home

	 
	
  

Console.js:61 Element NAV text content: "Home"
Console.js:61  SerializableStateInvariantMiddleware took 125ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (NAV) - "container" with scoped classes: [imported-5ffUO6Mj, imported-5ffUO6Mj-container]
Console.js:61 Processing 1 children of NAV
Console.js:61 Element OL text content: "Home"
Console.js:61  SerializableStateInvariantMiddleware took 134ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (OL) - "container" with scoped classes: [imported-5ffUO6Mj-breadcrumb, imported-5ffUO6Mj-rounded-0, imported-5ffUO6Mj-light-bg]
Console.js:61 Processing 1 children of OL
Console.js:61 Element LI text content: "Home"
Console.js:61  SerializableStateInvariantMiddleware took 139ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (LI) - "container" with scoped classes: [imported-5ffUO6Mj-breadcrumb-item]
Console.js:61 Processing 1 children of LI
Console.js:61 Element A text content: "Home"
Console.js:61  SerializableStateInvariantMiddleware took 114ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Home" with scoped classes: [imported-5ffUO6Mj-text-white]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 Element wnv2kVEzJiTsnNN_UukDd border styles: [Array(2)]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of LI
Console.js:61 Successfully processed 1 children of OL
Console.js:61 Successfully processed 1 children of NAV
Console.js:61 Successfully processed: NAV
Console.js:61 Processing element 3/9: HEADER
Console.js:61 Element classes: ['container']
Console.js:61 Element content preview: 
	
		 
    													
					
				
			
			
												
				I will listen and ensure that your comp
Console.js:61 Element HEADER text content: "I will listen and ensure that your complaint or co"
Console.js:61  SerializableStateInvariantMiddleware took 164ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (HEADER) - "container" with scoped classes: [imported-5ffUO6Mj, imported-5ffUO6Mj-container]
Console.js:61 Processing 1 children of HEADER
Console.js:61 Element DIV text content: "I will listen and ensure that your complaint or co"
Console.js:61  SerializableStateInvariantMiddleware took 107ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-row, imported-5ffUO6Mj-primary-header]
Console.js:61 Processing 2 children of DIV
Console.js:61 Element DIV text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 114ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-col-4, imported-5ffUO6Mj-col-sm-2]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element IMG text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 121ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add image
Console.js:61 Created element: image (IMG) - "container" with scoped classes: [imported-5ffUO6Mj-header-card-image, imported-5ffUO6Mj-mw-100, imported-5ffUO6Mj-mh-100]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Element DIV text content: "I will listen and ensure that your complaint or co"
save-dialog-notification.js:1 [Violation] 'setTimeout' handler took 267ms
Console.js:61  SerializableStateInvariantMiddleware took 158ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-col-8, imported-5ffUO6Mj-col-sm-10, imported-5ffUO6Mj-header-padding]
Console.js:61 Processing 3 children of DIV
Console.js:61 Element IMG text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 180ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add image
Console.js:61 Created element: image (IMG) - "container" with scoped classes: [imported-5ffUO6Mj-header-left-quote]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element P text content: "I will listen and ensure that your complaint or co"
Console.js:61  SerializableStateInvariantMiddleware took 104ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (P) - "I will listen and ensure that your complaint or co" with scoped classes: [imported-5ffUO6Mj-header-text]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element A text content: "Message and Biography"
Console.js:61  SerializableStateInvariantMiddleware took 122ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Message and Biography" with scoped classes: []
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 3 children of DIV
Console.js:61 Successfully processed 2 children of DIV
Console.js:61 Successfully processed 1 children of HEADER
Console.js:61 Successfully processed: HEADER
Console.js:61 Processing element 4/9: MAIN
Console.js:61 Element classes: (2) ['container', 'clearfix']
Console.js:61 Element content preview: 			
				
				
			
										The mandate of the NCC Ombudsman is to provide members of the public wit
Console.js:61 Element MAIN text content: "The mandate of the NCC Ombudsman is to provide mem"
Console.js:61  SerializableStateInvariantMiddleware took 99ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (MAIN) - "container" with scoped classes: [imported-5ffUO6Mj, imported-5ffUO6Mj-container, imported-5ffUO6Mj-clearfix]
Console.js:61 Processing 1 children of MAIN
Console.js:61 Element DIV text content: "The mandate of the NCC Ombudsman is to provide mem"
Console.js:61  SerializableStateInvariantMiddleware took 84ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-row]
Console.js:61 Processing 3 children of DIV
Console.js:61 Element DIV text content: "The mandate of the NCC Ombudsman is to provide mem"
Console.js:61  SerializableStateInvariantMiddleware took 85ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-col-12, imported-5ffUO6Mj-col-lg-5]
Console.js:61 Processing 3 children of DIV
Console.js:61 Element P text content: "The mandate of the NCC Ombudsman is to provide mem"
Console.js:61  SerializableStateInvariantMiddleware took 88ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (P) - "The mandate of the NCC Ombudsman is to provide mem" with scoped classes: []
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element P text content: "The mission of the NCC Ombudsman is to listen care"
Console.js:61  SerializableStateInvariantMiddleware took 80ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (P) - "The mission of the NCC Ombudsman is to listen care" with scoped classes: []
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element P text content: "Learn more about the office of the Ombudsman >>"
Console.js:61  SerializableStateInvariantMiddleware took 59ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (P) - "Learn more about the office of the Ombudsman >>" with scoped classes: []
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 3 children of DIV
Console.js:61 Element DIV text content: "Would you like to make a complaint?
		
		There are"
Console.js:61  SerializableStateInvariantMiddleware took 87ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-col-12, imported-5ffUO6Mj-col-lg-3]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element SECTION text content: "Would you like to make a complaint?
		
		There are"
Console.js:61  SerializableStateInvariantMiddleware took 48ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (SECTION) - "container" with scoped classes: [imported-5ffUO6Mj-highlight]
Console.js:61 Processing 4 children of SECTION
Console.js:61 Element H2 text content: "Would you like to make a complaint?"
Console.js:61  SerializableStateInvariantMiddleware took 47ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (H2) - "Would you like to make a complaint?" with scoped classes: []
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element HR text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 106ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (HR) - "container" with scoped classes: []
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element P text content: "There are 3 simple steps to take to ensure a smoot"
Console.js:61  SerializableStateInvariantMiddleware took 50ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (P) - "There are 3 simple steps to take to ensure a smoot" with scoped classes: []
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element A text content: "Complaint Process"
Console.js:61  SerializableStateInvariantMiddleware took 55ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Complaint Process" with scoped classes: [imported-5ffUO6Mj-btn, imported-5ffUO6Mj-btn-main]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 Element aYdw58Vm3IM8NNBl3m0gh border styles: (2) [Array(2), Array(2)]
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 4 children of SECTION
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Element DIV text content: "Frequently Asked Questions
				
					
				
					1
"
Console.js:61  SerializableStateInvariantMiddleware took 49ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-col-12, imported-5ffUO6Mj-col-lg-4]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element SECTION text content: "Frequently Asked Questions
				
					
				
					1
"
Console.js:61  SerializableStateInvariantMiddleware took 57ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (SECTION) - "container" with scoped classes: [imported-5ffUO6Mj-faq, imported-5ffUO6Mj-bg-primary, imported-5ffUO6Mj-text-white]
Console.js:61 Processing 4 children of SECTION
Console.js:61 Element H2 text content: "Frequently Asked Questions"
Console.js:61  SerializableStateInvariantMiddleware took 70ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (H2) - "Frequently Asked Questions" with scoped classes: [imported-5ffUO6Mj-faq-title]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element HR text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 53ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (HR) - "container" with scoped classes: [imported-5ffUO6Mj-light]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element DIV text content: "1
				
				
					Q: How long will it take the NCC "
Console.js:61  SerializableStateInvariantMiddleware took 58ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-row, imported-5ffUO6Mj-faq-group, imported-5ffUO6Mj-faq-margin]
Console.js:61 Processing 2 children of DIV
Console.js:61 Element DIV text content: "1"
Console.js:61  SerializableStateInvariantMiddleware took 58ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-col-2, imported-5ffUO6Mj-col-sm-1, imported-5ffUO6Mj-col-lg-2, imported-5ffUO6Mj-text-center, imported-5ffUO6Mj-faq-number]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element DIV text content: "1"
Console.js:61  SerializableStateInvariantMiddleware took 60ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-faq-circle, imported-5ffUO6Mj-d-inline-block]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Element DIV text content: "Q: How long will it take the NCC Ombudsman to inve"
Console.js:61  SerializableStateInvariantMiddleware took 51ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-col-10, imported-5ffUO6Mj-col-sm-11, imported-5ffUO6Mj-col-lg-10, imported-5ffUO6Mj-faq-pair]
Console.js:61 Processing 2 children of DIV
Console.js:61 Element DIV text content: "Q: How long will it take the NCC Ombudsman to inve"
Console.js:61  SerializableStateInvariantMiddleware took 41ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-faq-question]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element DIV text content: "A: While the Ombudsman strives to respond to compl"
Console.js:61  SerializableStateInvariantMiddleware took 84ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-faq-answer, imported-5ffUO6Mj-faq-margin]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 2 children of DIV
Console.js:61 Successfully processed 2 children of DIV
Console.js:61 Element DIV text content: "More questions and answers"
Console.js:61  SerializableStateInvariantMiddleware took 49ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-row, imported-5ffUO6Mj-faq-group, imported-5ffUO6Mj-faq-margin]
Console.js:61 Processing 2 children of DIV
Console.js:61 Element DIV text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 52ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-col-2, imported-5ffUO6Mj-col-sm-1, imported-5ffUO6Mj-col-lg-2]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element DIV text content: "More questions and answers"
Console.js:61  SerializableStateInvariantMiddleware took 86ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-col-10, imported-5ffUO6Mj-col-sm-11, imported-5ffUO6Mj-col-lg-10]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element A text content: "More questions and answers"
Console.js:61  SerializableStateInvariantMiddleware took 74ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "More questions and answers" with scoped classes: [imported-5ffUO6Mj-faq-link]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Successfully processed 2 children of DIV
Console.js:61 Successfully processed 4 children of SECTION
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Successfully processed 3 children of DIV
Console.js:61 Successfully processed 1 children of MAIN
Console.js:61 Successfully processed: MAIN
Console.js:61 Processing element 5/9: FOOTER
Console.js:61 Element classes: (3) ['container', 'p-0', 'pt-3']
Console.js:61 Element content preview: 
	
		
							Reports and Media
							Resources
							Terms of Reference
					
		
		
			
		
	

Console.js:61 Element FOOTER text content: "Reports and Media
							Resources
							Terms of"
Console.js:61  SerializableStateInvariantMiddleware took 95ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (FOOTER) - "container" with scoped classes: [imported-5ffUO6Mj, imported-5ffUO6Mj-container, imported-5ffUO6Mj-pt-3]
Console.js:61 Processing 1 children of FOOTER
Console.js:61 Element NAV text content: "Reports and Media
							Resources
							Terms of"
Console.js:61  SerializableStateInvariantMiddleware took 82ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (NAV) - "container" with scoped classes: [imported-5ffUO6Mj-navbar, imported-5ffUO6Mj-navbar-dark, imported-5ffUO6Mj-bg-primary, imported-5ffUO6Mj-navbar-expand]
Console.js:61 Processing 2 children of NAV
Console.js:61 Element DIV text content: "Reports and Media
							Resources
							Terms of"
Console.js:61  SerializableStateInvariantMiddleware took 91ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-collapse, imported-5ffUO6Mj-navbar-collapse, imported-5ffUO6Mj-navbar-nav, imported-5ffUO6Mj-flex-column, imported-5ffUO6Mj-align-items-start]
Console.js:61 Processing 3 children of DIV
Console.js:61 Element A text content: "Reports and Media"
Console.js:61  SerializableStateInvariantMiddleware took 117ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Reports and Media" with scoped classes: [imported-5ffUO6Mj-nav-item, imported-5ffUO6Mj-nav-link, imported-5ffUO6Mj-nav-link-footer]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element A text content: "Resources"
Console.js:61  SerializableStateInvariantMiddleware took 99ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Resources" with scoped classes: [imported-5ffUO6Mj-nav-item, imported-5ffUO6Mj-nav-link, imported-5ffUO6Mj-nav-link-footer]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Element A text content: "Terms of Reference"
Console.js:61  SerializableStateInvariantMiddleware took 86ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "Terms of Reference" with scoped classes: [imported-5ffUO6Mj-nav-item, imported-5ffUO6Mj-nav-link, imported-5ffUO6Mj-nav-link-footer]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 3 children of DIV
Console.js:61 Element DIV text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 76ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add container
Console.js:61 Created element: container (DIV) - "container" with scoped classes: [imported-5ffUO6Mj-navbar-nav, imported-5ffUO6Mj-mx-auto, imported-5ffUO6Mj-align-items-right]
Console.js:61 Processing 1 children of DIV
Console.js:61 Element A text content: ""
Console.js:61  SerializableStateInvariantMiddleware took 74ms, which is more than the warning threshold of 32ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.
Mt.forEach.n.<computed> @ Console.js:61
warnIfExceeded @ utils.ts:16
(anonymous) @ serializableStateInvariantMiddleware.ts:197
(anonymous) @ redux-thunk.mjs:7
(anonymous) @ immutableStateInvariantMiddleware.ts:174
(anonymous) @ actionCreatorInvariantMiddleware.ts:29
store.dispatch @ historyIntegration.ts:25
recordAction @ historyManager.ts:115
trackHistoryForAction @ historyIntegration.ts:87
store.dispatch @ historyIntegration.ts:31
convertHTMLToElements @ WebsiteImport.tsx:576
convertHTMLToElements @ WebsiteImport.tsx:592
convertHTMLToElements @ WebsiteImport.tsx:592
await in convertHTMLToElements
convertHTMLToElements @ WebsiteImport.tsx:592
handleImport @ WebsiteImport.tsx:114
await in handleImport
callCallback2 @ react-dom.development.js:4164
invokeGuardedCallbackDev @ react-dom.development.js:4213
invokeGuardedCallback @ react-dom.development.js:4277
invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:4291
executeDispatch @ react-dom.development.js:9041
processDispatchQueueItemsInOrder @ react-dom.development.js:9073
processDispatchQueue @ react-dom.development.js:9086
dispatchEventsForPlugins @ react-dom.development.js:9097
(anonymous) @ react-dom.development.js:9288
batchedUpdates$1 @ react-dom.development.js:26179
batchedUpdates @ react-dom.development.js:3991
dispatchEventForPluginEventSystem @ react-dom.development.js:9287
dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay @ react-dom.development.js:6465
dispatchEvent @ react-dom.development.js:6457
dispatchDiscreteEvent @ react-dom.development.js:6430
Console.js:61 History recorded: Add text
Console.js:61 Created element: text (A) - "A text" with scoped classes: [imported-5ffUO6Mj-navbar-brand]
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61  Selector unknown returned a different result when called with the same parameters. This can lead to unnecessary rerenders.
Selectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization {state: {…}, selected: {…}, selected2: {…}, stack: 'Error\n    at https://1bd21cbd-0e36-4bdb-8470-1a9f0…rc/components/DesignTool/CanvasElement.tsx:49:27)'}
Mt.forEach.n.<computed> @ Console.js:61
(anonymous) @ useSelector.ts:199
memoizedSelector @ use-sync-external-store-with-selector.development.js:46
(anonymous) @ use-sync-external-store-with-selector.development.js:70
mountSyncExternalStore @ react-dom.development.js:15980
useSyncExternalStore @ react-dom.development.js:16908
useSyncExternalStore @ react.development.js:1676
exports.useSyncExternalStoreWithSelector @ use-sync-external-store-with-selector.development.js:81
useSelector2 @ useSelector.ts:243
useHoverState @ CanvasElement.tsx:20
CanvasElement @ CanvasElement.tsx:43
renderWithHooks @ react-dom.development.js:15486
mountIndeterminateComponent @ react-dom.development.js:20103
beginWork @ react-dom.development.js:21626
beginWork$1 @ react-dom.development.js:27465
performUnitOfWork @ react-dom.development.js:26596
workLoopSync @ react-dom.development.js:26505
renderRootSync @ react-dom.development.js:26473
performSyncWorkOnRoot @ react-dom.development.js:26124
flushSyncCallbacks @ react-dom.development.js:12042
(anonymous) @ react-dom.development.js:25690
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
Console.js:61 Successfully processed 1 children of DIV
Console.js:61 Successfully processed 2 children of NAV
Console.js:61 Successfully processed 1 children of FOOTER
Console.js:61 Successfully processed: FOOTER
Console.js:61 Processing element 6/9: SCRIPT
Console.js:61 Element classes: []
Console.js:61 Element content preview: 
Console.js:61 Skipping non-visual element: SCRIPT
Console.js:61 Processing element 7/9: SCRIPT
Console.js:61 Element classes: []
Console.js:61 Element content preview: 
Console.js:61 Skipping non-visual element: SCRIPT
Console.js:61 Processing element 8/9: SCRIPT
Console.js:61 Element classes: []
Console.js:61 Element content preview: 
Console.js:61 Skipping non-visual element: SCRIPT
Console.js:61 Processing element 9/9: SCRIPT
Console.js:61 Element classes: []
Console.js:61 Element content preview: 
Console.js:61 Skipping non-visual element: SCRIPT
Console.js:61 Processing assets...
Console.js:61 Processing assets: 0
Console.js:61 Website import completed successfully
[Violation] Forced reflow while executing JavaScript took 36ms
Console.js:61 CompoundPropertyInput render: {propertyType: 'margin', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'padding', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'borderRadius', hasConfig: true}
Console.js:61 CompoundPropertyInput render: {propertyType: 'border', hasConfig: true}
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
[Violation] 'message' handler took <N>ms
6402-2535928c6770715e.js:1  WebSocket is already in CLOSING or CLOSED state.
send @ 6402-2535928c6770715e.js:1
k @ 6402-2535928c6770715e.js:1
send @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
apply @ 6402-2535928c6770715e.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
c @ 2830-2663341f49da286f.js:1
(anonymous) @ 2830-2663341f49da286f.js:1
n @ _app-dc45261c6c86c5c5.js:16
setTimeout
(anonymous) @ _app-dc45261c6c86c5c5.js:16
(anonymous) @ 2830-2663341f49da286f.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
n @ 7071-2b18ee71483ee1b7.js:1
n @ _app-dc45261c6c86c5c5.js:16
save-dialog-notification.js:1 [Violation] 'setTimeout' handler took 143ms
6402-2535928c6770715e.js:1  WebSocket is already in CLOSING or CLOSED state.
send @ 6402-2535928c6770715e.js:1
k @ 6402-2535928c6770715e.js:1
send @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
(anonymous) @ 6402-2535928c6770715e.js:1
apply @ 6402-2535928c6770715e.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
(anonymous) @ main-297033db8b582cb9.js:1
n @ main-297033db8b582cb9.js:1
u @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ main-297033db8b582cb9.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
c @ 2830-2663341f49da286f.js:1
(anonymous) @ 2830-2663341f49da286f.js:1
n @ _app-dc45261c6c86c5c5.js:16
setTimeout
(anonymous) @ _app-dc45261c6c86c5c5.js:16
(anonymous) @ 2830-2663341f49da286f.js:1
(anonymous) @ 7071-2b18ee71483ee1b7.js:1
n @ 7071-2b18ee71483ee1b7.js:1
n @ _app-dc45261c6c86c5c5.js:16
_app-dc45261c6c86c5c5.js:16 [Violation] 'setTimeout' handler took 1360ms
save-dialog-notification.js:1 [Violation] 'setTimeout' handler took 376ms
